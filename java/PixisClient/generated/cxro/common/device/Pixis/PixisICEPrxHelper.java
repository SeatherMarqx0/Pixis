// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `PixisICEPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package cxro.common.device.Pixis;

public final class PixisICEPrxHelper extends Ice.ObjectPrxHelperBase implements PixisICEPrx
{
    public boolean
    contCheckStatus()
        throws CamException
    {
        return contCheckStatus(null, false);
    }

    public boolean
    contCheckStatus(java.util.Map<String, String> __ctx)
        throws CamException
    {
        return contCheckStatus(__ctx, true);
    }

    private boolean
    contCheckStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws CamException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("contCheckStatus");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.contCheckStatus(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __contCheckStatus_name = "contCheckStatus";

    public Ice.AsyncResult begin_contCheckStatus()
    {
        return begin_contCheckStatus(null, false, null);
    }

    public Ice.AsyncResult begin_contCheckStatus(java.util.Map<String, String> __ctx)
    {
        return begin_contCheckStatus(__ctx, true, null);
    }

    public Ice.AsyncResult begin_contCheckStatus(Ice.Callback __cb)
    {
        return begin_contCheckStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_contCheckStatus(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_contCheckStatus(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_contCheckStatus(Callback_PixisICE_contCheckStatus __cb)
    {
        return begin_contCheckStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_contCheckStatus(java.util.Map<String, String> __ctx, Callback_PixisICE_contCheckStatus __cb)
    {
        return begin_contCheckStatus(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_contCheckStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__contCheckStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __contCheckStatus_name, __cb);
        try
        {
            __result.__prepare(__contCheckStatus_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_contCheckStatus(Ice.AsyncResult __result)
        throws CamException
    {
        Ice.AsyncResult.__check(__result, this, __contCheckStatus_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(CamException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    contGetFrame(ImageContainerHolder image)
    {
        return contGetFrame(image, null, false);
    }

    public boolean
    contGetFrame(ImageContainerHolder image, java.util.Map<String, String> __ctx)
    {
        return contGetFrame(image, __ctx, true);
    }

    private boolean
    contGetFrame(ImageContainerHolder image, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("contGetFrame");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.contGetFrame(image, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __contGetFrame_name = "contGetFrame";

    public Ice.AsyncResult begin_contGetFrame()
    {
        return begin_contGetFrame(null, false, null);
    }

    public Ice.AsyncResult begin_contGetFrame(java.util.Map<String, String> __ctx)
    {
        return begin_contGetFrame(__ctx, true, null);
    }

    public Ice.AsyncResult begin_contGetFrame(Ice.Callback __cb)
    {
        return begin_contGetFrame(null, false, __cb);
    }

    public Ice.AsyncResult begin_contGetFrame(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_contGetFrame(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_contGetFrame(Callback_PixisICE_contGetFrame __cb)
    {
        return begin_contGetFrame(null, false, __cb);
    }

    public Ice.AsyncResult begin_contGetFrame(java.util.Map<String, String> __ctx, Callback_PixisICE_contGetFrame __cb)
    {
        return begin_contGetFrame(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_contGetFrame(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__contGetFrame_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __contGetFrame_name, __cb);
        try
        {
            __result.__prepare(__contGetFrame_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_contGetFrame(ImageContainerHolder image, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __contGetFrame_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        image.value = ImageContainerHelper.read(__is);
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    contHalt(short camState)
    {
        return contHalt(camState, null, false);
    }

    public boolean
    contHalt(short camState, java.util.Map<String, String> __ctx)
    {
        return contHalt(camState, __ctx, true);
    }

    private boolean
    contHalt(short camState, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("contHalt");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.contHalt(camState, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __contHalt_name = "contHalt";

    public Ice.AsyncResult begin_contHalt(short camState)
    {
        return begin_contHalt(camState, null, false, null);
    }

    public Ice.AsyncResult begin_contHalt(short camState, java.util.Map<String, String> __ctx)
    {
        return begin_contHalt(camState, __ctx, true, null);
    }

    public Ice.AsyncResult begin_contHalt(short camState, Ice.Callback __cb)
    {
        return begin_contHalt(camState, null, false, __cb);
    }

    public Ice.AsyncResult begin_contHalt(short camState, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_contHalt(camState, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_contHalt(short camState, Callback_PixisICE_contHalt __cb)
    {
        return begin_contHalt(camState, null, false, __cb);
    }

    public Ice.AsyncResult begin_contHalt(short camState, java.util.Map<String, String> __ctx, Callback_PixisICE_contHalt __cb)
    {
        return begin_contHalt(camState, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_contHalt(short camState, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__contHalt_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __contHalt_name, __cb);
        try
        {
            __result.__prepare(__contHalt_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeShort(camState);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_contHalt(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __contHalt_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin)
    {
        return contStart(exposureTime, x0, x1, y0, y1, xbin, ybin, null, false);
    }

    public boolean
    contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, java.util.Map<String, String> __ctx)
    {
        return contStart(exposureTime, x0, x1, y0, y1, xbin, ybin, __ctx, true);
    }

    private boolean
    contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("contStart");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.contStart(exposureTime, x0, x1, y0, y1, xbin, ybin, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __contStart_name = "contStart";

    public Ice.AsyncResult begin_contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin)
    {
        return begin_contStart(exposureTime, x0, x1, y0, y1, xbin, ybin, null, false, null);
    }

    public Ice.AsyncResult begin_contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, java.util.Map<String, String> __ctx)
    {
        return begin_contStart(exposureTime, x0, x1, y0, y1, xbin, ybin, __ctx, true, null);
    }

    public Ice.AsyncResult begin_contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, Ice.Callback __cb)
    {
        return begin_contStart(exposureTime, x0, x1, y0, y1, xbin, ybin, null, false, __cb);
    }

    public Ice.AsyncResult begin_contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_contStart(exposureTime, x0, x1, y0, y1, xbin, ybin, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, Callback_PixisICE_contStart __cb)
    {
        return begin_contStart(exposureTime, x0, x1, y0, y1, xbin, ybin, null, false, __cb);
    }

    public Ice.AsyncResult begin_contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, java.util.Map<String, String> __ctx, Callback_PixisICE_contStart __cb)
    {
        return begin_contStart(exposureTime, x0, x1, y0, y1, xbin, ybin, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__contStart_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __contStart_name, __cb);
        try
        {
            __result.__prepare(__contStart_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeLong(exposureTime);
            __os.writeShort(x0);
            __os.writeShort(x1);
            __os.writeShort(y0);
            __os.writeShort(y1);
            __os.writeShort(xbin);
            __os.writeShort(ybin);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_contStart(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __contStart_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    expCheckStatus()
    {
        return expCheckStatus(null, false);
    }

    public boolean
    expCheckStatus(java.util.Map<String, String> __ctx)
    {
        return expCheckStatus(__ctx, true);
    }

    private boolean
    expCheckStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("expCheckStatus");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.expCheckStatus(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __expCheckStatus_name = "expCheckStatus";

    public Ice.AsyncResult begin_expCheckStatus()
    {
        return begin_expCheckStatus(null, false, null);
    }

    public Ice.AsyncResult begin_expCheckStatus(java.util.Map<String, String> __ctx)
    {
        return begin_expCheckStatus(__ctx, true, null);
    }

    public Ice.AsyncResult begin_expCheckStatus(Ice.Callback __cb)
    {
        return begin_expCheckStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_expCheckStatus(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_expCheckStatus(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_expCheckStatus(Callback_PixisICE_expCheckStatus __cb)
    {
        return begin_expCheckStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_expCheckStatus(java.util.Map<String, String> __ctx, Callback_PixisICE_expCheckStatus __cb)
    {
        return begin_expCheckStatus(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_expCheckStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__expCheckStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __expCheckStatus_name, __cb);
        try
        {
            __result.__prepare(__expCheckStatus_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_expCheckStatus(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __expCheckStatus_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    expGetFrame(ImageContainerHolder image)
    {
        return expGetFrame(image, null, false);
    }

    public boolean
    expGetFrame(ImageContainerHolder image, java.util.Map<String, String> __ctx)
    {
        return expGetFrame(image, __ctx, true);
    }

    private boolean
    expGetFrame(ImageContainerHolder image, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("expGetFrame");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.expGetFrame(image, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __expGetFrame_name = "expGetFrame";

    public Ice.AsyncResult begin_expGetFrame()
    {
        return begin_expGetFrame(null, false, null);
    }

    public Ice.AsyncResult begin_expGetFrame(java.util.Map<String, String> __ctx)
    {
        return begin_expGetFrame(__ctx, true, null);
    }

    public Ice.AsyncResult begin_expGetFrame(Ice.Callback __cb)
    {
        return begin_expGetFrame(null, false, __cb);
    }

    public Ice.AsyncResult begin_expGetFrame(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_expGetFrame(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_expGetFrame(Callback_PixisICE_expGetFrame __cb)
    {
        return begin_expGetFrame(null, false, __cb);
    }

    public Ice.AsyncResult begin_expGetFrame(java.util.Map<String, String> __ctx, Callback_PixisICE_expGetFrame __cb)
    {
        return begin_expGetFrame(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_expGetFrame(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__expGetFrame_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __expGetFrame_name, __cb);
        try
        {
            __result.__prepare(__expGetFrame_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_expGetFrame(ImageContainerHolder image, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __expGetFrame_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        image.value = ImageContainerHelper.read(__is);
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    expHalt(short camState)
    {
        return expHalt(camState, null, false);
    }

    public boolean
    expHalt(short camState, java.util.Map<String, String> __ctx)
    {
        return expHalt(camState, __ctx, true);
    }

    private boolean
    expHalt(short camState, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("expHalt");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.expHalt(camState, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __expHalt_name = "expHalt";

    public Ice.AsyncResult begin_expHalt(short camState)
    {
        return begin_expHalt(camState, null, false, null);
    }

    public Ice.AsyncResult begin_expHalt(short camState, java.util.Map<String, String> __ctx)
    {
        return begin_expHalt(camState, __ctx, true, null);
    }

    public Ice.AsyncResult begin_expHalt(short camState, Ice.Callback __cb)
    {
        return begin_expHalt(camState, null, false, __cb);
    }

    public Ice.AsyncResult begin_expHalt(short camState, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_expHalt(camState, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_expHalt(short camState, Callback_PixisICE_expHalt __cb)
    {
        return begin_expHalt(camState, null, false, __cb);
    }

    public Ice.AsyncResult begin_expHalt(short camState, java.util.Map<String, String> __ctx, Callback_PixisICE_expHalt __cb)
    {
        return begin_expHalt(camState, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_expHalt(short camState, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__expHalt_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __expHalt_name, __cb);
        try
        {
            __result.__prepare(__expHalt_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeShort(camState);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_expHalt(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __expHalt_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin)
    {
        return expSetup(exposureTime, x0, x1, y0, y1, xbin, ybin, null, false);
    }

    public boolean
    expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, java.util.Map<String, String> __ctx)
    {
        return expSetup(exposureTime, x0, x1, y0, y1, xbin, ybin, __ctx, true);
    }

    private boolean
    expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("expSetup");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.expSetup(exposureTime, x0, x1, y0, y1, xbin, ybin, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __expSetup_name = "expSetup";

    public Ice.AsyncResult begin_expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin)
    {
        return begin_expSetup(exposureTime, x0, x1, y0, y1, xbin, ybin, null, false, null);
    }

    public Ice.AsyncResult begin_expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, java.util.Map<String, String> __ctx)
    {
        return begin_expSetup(exposureTime, x0, x1, y0, y1, xbin, ybin, __ctx, true, null);
    }

    public Ice.AsyncResult begin_expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, Ice.Callback __cb)
    {
        return begin_expSetup(exposureTime, x0, x1, y0, y1, xbin, ybin, null, false, __cb);
    }

    public Ice.AsyncResult begin_expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_expSetup(exposureTime, x0, x1, y0, y1, xbin, ybin, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, Callback_PixisICE_expSetup __cb)
    {
        return begin_expSetup(exposureTime, x0, x1, y0, y1, xbin, ybin, null, false, __cb);
    }

    public Ice.AsyncResult begin_expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, java.util.Map<String, String> __ctx, Callback_PixisICE_expSetup __cb)
    {
        return begin_expSetup(exposureTime, x0, x1, y0, y1, xbin, ybin, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__expSetup_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __expSetup_name, __cb);
        try
        {
            __result.__prepare(__expSetup_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeLong(exposureTime);
            __os.writeShort(x0);
            __os.writeShort(x1);
            __os.writeShort(y0);
            __os.writeShort(y1);
            __os.writeShort(xbin);
            __os.writeShort(ybin);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_expSetup(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __expSetup_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    expStart()
    {
        return expStart(null, false);
    }

    public boolean
    expStart(java.util.Map<String, String> __ctx)
    {
        return expStart(__ctx, true);
    }

    private boolean
    expStart(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("expStart");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.expStart(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __expStart_name = "expStart";

    public Ice.AsyncResult begin_expStart()
    {
        return begin_expStart(null, false, null);
    }

    public Ice.AsyncResult begin_expStart(java.util.Map<String, String> __ctx)
    {
        return begin_expStart(__ctx, true, null);
    }

    public Ice.AsyncResult begin_expStart(Ice.Callback __cb)
    {
        return begin_expStart(null, false, __cb);
    }

    public Ice.AsyncResult begin_expStart(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_expStart(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_expStart(Callback_PixisICE_expStart __cb)
    {
        return begin_expStart(null, false, __cb);
    }

    public Ice.AsyncResult begin_expStart(java.util.Map<String, String> __ctx, Callback_PixisICE_expStart __cb)
    {
        return begin_expStart(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_expStart(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__expStart_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __expStart_name, __cb);
        try
        {
            __result.__prepare(__expStart_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_expStart(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __expStart_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getBits(Ice.IntHolder bits)
    {
        return getBits(bits, null, false);
    }

    public boolean
    getBits(Ice.IntHolder bits, java.util.Map<String, String> __ctx)
    {
        return getBits(bits, __ctx, true);
    }

    private boolean
    getBits(Ice.IntHolder bits, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getBits");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getBits(bits, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getBits_name = "getBits";

    public Ice.AsyncResult begin_getBits()
    {
        return begin_getBits(null, false, null);
    }

    public Ice.AsyncResult begin_getBits(java.util.Map<String, String> __ctx)
    {
        return begin_getBits(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getBits(Ice.Callback __cb)
    {
        return begin_getBits(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBits(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBits(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBits(Callback_PixisICE_getBits __cb)
    {
        return begin_getBits(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBits(java.util.Map<String, String> __ctx, Callback_PixisICE_getBits __cb)
    {
        return begin_getBits(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBits(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBits_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBits_name, __cb);
        try
        {
            __result.__prepare(__getBits_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getBits(Ice.IntHolder bits, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getBits_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        bits.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getCcsStatus(Ice.IntHolder ccsStatus)
    {
        return getCcsStatus(ccsStatus, null, false);
    }

    public boolean
    getCcsStatus(Ice.IntHolder ccsStatus, java.util.Map<String, String> __ctx)
    {
        return getCcsStatus(ccsStatus, __ctx, true);
    }

    private boolean
    getCcsStatus(Ice.IntHolder ccsStatus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCcsStatus");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getCcsStatus(ccsStatus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getCcsStatus_name = "getCcsStatus";

    public Ice.AsyncResult begin_getCcsStatus()
    {
        return begin_getCcsStatus(null, false, null);
    }

    public Ice.AsyncResult begin_getCcsStatus(java.util.Map<String, String> __ctx)
    {
        return begin_getCcsStatus(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCcsStatus(Ice.Callback __cb)
    {
        return begin_getCcsStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCcsStatus(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCcsStatus(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCcsStatus(Callback_PixisICE_getCcsStatus __cb)
    {
        return begin_getCcsStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCcsStatus(java.util.Map<String, String> __ctx, Callback_PixisICE_getCcsStatus __cb)
    {
        return begin_getCcsStatus(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCcsStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCcsStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCcsStatus_name, __cb);
        try
        {
            __result.__prepare(__getCcsStatus_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getCcsStatus(Ice.IntHolder ccsStatus, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCcsStatus_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        ccsStatus.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getClearCycles(Ice.IntHolder cycles)
    {
        return getClearCycles(cycles, null, false);
    }

    public boolean
    getClearCycles(Ice.IntHolder cycles, java.util.Map<String, String> __ctx)
    {
        return getClearCycles(cycles, __ctx, true);
    }

    private boolean
    getClearCycles(Ice.IntHolder cycles, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getClearCycles");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getClearCycles(cycles, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getClearCycles_name = "getClearCycles";

    public Ice.AsyncResult begin_getClearCycles()
    {
        return begin_getClearCycles(null, false, null);
    }

    public Ice.AsyncResult begin_getClearCycles(java.util.Map<String, String> __ctx)
    {
        return begin_getClearCycles(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getClearCycles(Ice.Callback __cb)
    {
        return begin_getClearCycles(null, false, __cb);
    }

    public Ice.AsyncResult begin_getClearCycles(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getClearCycles(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getClearCycles(Callback_PixisICE_getClearCycles __cb)
    {
        return begin_getClearCycles(null, false, __cb);
    }

    public Ice.AsyncResult begin_getClearCycles(java.util.Map<String, String> __ctx, Callback_PixisICE_getClearCycles __cb)
    {
        return begin_getClearCycles(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getClearCycles(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getClearCycles_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getClearCycles_name, __cb);
        try
        {
            __result.__prepare(__getClearCycles_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getClearCycles(Ice.IntHolder cycles, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getClearCycles_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        cycles.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getClearStrips(Ice.IntHolder strips)
    {
        return getClearStrips(strips, null, false);
    }

    public boolean
    getClearStrips(Ice.IntHolder strips, java.util.Map<String, String> __ctx)
    {
        return getClearStrips(strips, __ctx, true);
    }

    private boolean
    getClearStrips(Ice.IntHolder strips, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getClearStrips");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getClearStrips(strips, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getClearStrips_name = "getClearStrips";

    public Ice.AsyncResult begin_getClearStrips()
    {
        return begin_getClearStrips(null, false, null);
    }

    public Ice.AsyncResult begin_getClearStrips(java.util.Map<String, String> __ctx)
    {
        return begin_getClearStrips(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getClearStrips(Ice.Callback __cb)
    {
        return begin_getClearStrips(null, false, __cb);
    }

    public Ice.AsyncResult begin_getClearStrips(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getClearStrips(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getClearStrips(Callback_PixisICE_getClearStrips __cb)
    {
        return begin_getClearStrips(null, false, __cb);
    }

    public Ice.AsyncResult begin_getClearStrips(java.util.Map<String, String> __ctx, Callback_PixisICE_getClearStrips __cb)
    {
        return begin_getClearStrips(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getClearStrips(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getClearStrips_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getClearStrips_name, __cb);
        try
        {
            __result.__prepare(__getClearStrips_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getClearStrips(Ice.IntHolder strips, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getClearStrips_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        strips.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getError(Ice.StringHolder error)
    {
        return getError(error, null, false);
    }

    public boolean
    getError(Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return getError(error, __ctx, true);
    }

    private boolean
    getError(Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getError");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getError(error, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getError_name = "getError";

    public Ice.AsyncResult begin_getError()
    {
        return begin_getError(null, false, null);
    }

    public Ice.AsyncResult begin_getError(java.util.Map<String, String> __ctx)
    {
        return begin_getError(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getError(Ice.Callback __cb)
    {
        return begin_getError(null, false, __cb);
    }

    public Ice.AsyncResult begin_getError(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getError(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getError(Callback_PixisICE_getError __cb)
    {
        return begin_getError(null, false, __cb);
    }

    public Ice.AsyncResult begin_getError(java.util.Map<String, String> __ctx, Callback_PixisICE_getError __cb)
    {
        return begin_getError(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getError(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getError_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getError_name, __cb);
        try
        {
            __result.__prepare(__getError_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getError(Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getError_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        error.value = __is.readString();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getFrameCapable(Ice.IntHolder frameCapable)
    {
        return getFrameCapable(frameCapable, null, false);
    }

    public boolean
    getFrameCapable(Ice.IntHolder frameCapable, java.util.Map<String, String> __ctx)
    {
        return getFrameCapable(frameCapable, __ctx, true);
    }

    private boolean
    getFrameCapable(Ice.IntHolder frameCapable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFrameCapable");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getFrameCapable(frameCapable, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getFrameCapable_name = "getFrameCapable";

    public Ice.AsyncResult begin_getFrameCapable()
    {
        return begin_getFrameCapable(null, false, null);
    }

    public Ice.AsyncResult begin_getFrameCapable(java.util.Map<String, String> __ctx)
    {
        return begin_getFrameCapable(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getFrameCapable(Ice.Callback __cb)
    {
        return begin_getFrameCapable(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFrameCapable(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFrameCapable(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFrameCapable(Callback_PixisICE_getFrameCapable __cb)
    {
        return begin_getFrameCapable(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFrameCapable(java.util.Map<String, String> __ctx, Callback_PixisICE_getFrameCapable __cb)
    {
        return begin_getFrameCapable(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFrameCapable(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFrameCapable_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFrameCapable_name, __cb);
        try
        {
            __result.__prepare(__getFrameCapable_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getFrameCapable(Ice.IntHolder frameCapable, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFrameCapable_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        frameCapable.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getGain(Ice.IntHolder gain)
    {
        return getGain(gain, null, false);
    }

    public boolean
    getGain(Ice.IntHolder gain, java.util.Map<String, String> __ctx)
    {
        return getGain(gain, __ctx, true);
    }

    private boolean
    getGain(Ice.IntHolder gain, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getGain");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getGain(gain, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getGain_name = "getGain";

    public Ice.AsyncResult begin_getGain()
    {
        return begin_getGain(null, false, null);
    }

    public Ice.AsyncResult begin_getGain(java.util.Map<String, String> __ctx)
    {
        return begin_getGain(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getGain(Ice.Callback __cb)
    {
        return begin_getGain(null, false, __cb);
    }

    public Ice.AsyncResult begin_getGain(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGain(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getGain(Callback_PixisICE_getGain __cb)
    {
        return begin_getGain(null, false, __cb);
    }

    public Ice.AsyncResult begin_getGain(java.util.Map<String, String> __ctx, Callback_PixisICE_getGain __cb)
    {
        return begin_getGain(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGain(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGain_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGain_name, __cb);
        try
        {
            __result.__prepare(__getGain_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getGain(Ice.IntHolder gain, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getGain_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        gain.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getGainMultEnable(Ice.IntHolder enabled)
    {
        return getGainMultEnable(enabled, null, false);
    }

    public boolean
    getGainMultEnable(Ice.IntHolder enabled, java.util.Map<String, String> __ctx)
    {
        return getGainMultEnable(enabled, __ctx, true);
    }

    private boolean
    getGainMultEnable(Ice.IntHolder enabled, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getGainMultEnable");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getGainMultEnable(enabled, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getGainMultEnable_name = "getGainMultEnable";

    public Ice.AsyncResult begin_getGainMultEnable()
    {
        return begin_getGainMultEnable(null, false, null);
    }

    public Ice.AsyncResult begin_getGainMultEnable(java.util.Map<String, String> __ctx)
    {
        return begin_getGainMultEnable(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getGainMultEnable(Ice.Callback __cb)
    {
        return begin_getGainMultEnable(null, false, __cb);
    }

    public Ice.AsyncResult begin_getGainMultEnable(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGainMultEnable(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getGainMultEnable(Callback_PixisICE_getGainMultEnable __cb)
    {
        return begin_getGainMultEnable(null, false, __cb);
    }

    public Ice.AsyncResult begin_getGainMultEnable(java.util.Map<String, String> __ctx, Callback_PixisICE_getGainMultEnable __cb)
    {
        return begin_getGainMultEnable(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGainMultEnable(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGainMultEnable_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGainMultEnable_name, __cb);
        try
        {
            __result.__prepare(__getGainMultEnable_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getGainMultEnable(Ice.IntHolder enabled, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getGainMultEnable_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        enabled.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getGainMultFactor(Ice.IntHolder factor)
    {
        return getGainMultFactor(factor, null, false);
    }

    public boolean
    getGainMultFactor(Ice.IntHolder factor, java.util.Map<String, String> __ctx)
    {
        return getGainMultFactor(factor, __ctx, true);
    }

    private boolean
    getGainMultFactor(Ice.IntHolder factor, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getGainMultFactor");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getGainMultFactor(factor, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getGainMultFactor_name = "getGainMultFactor";

    public Ice.AsyncResult begin_getGainMultFactor()
    {
        return begin_getGainMultFactor(null, false, null);
    }

    public Ice.AsyncResult begin_getGainMultFactor(java.util.Map<String, String> __ctx)
    {
        return begin_getGainMultFactor(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getGainMultFactor(Ice.Callback __cb)
    {
        return begin_getGainMultFactor(null, false, __cb);
    }

    public Ice.AsyncResult begin_getGainMultFactor(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGainMultFactor(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getGainMultFactor(Callback_PixisICE_getGainMultFactor __cb)
    {
        return begin_getGainMultFactor(null, false, __cb);
    }

    public Ice.AsyncResult begin_getGainMultFactor(java.util.Map<String, String> __ctx, Callback_PixisICE_getGainMultFactor __cb)
    {
        return begin_getGainMultFactor(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGainMultFactor(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGainMultFactor_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGainMultFactor_name, __cb);
        try
        {
            __result.__prepare(__getGainMultFactor_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getGainMultFactor(Ice.IntHolder factor, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getGainMultFactor_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        factor.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getMaxGain(Ice.IntHolder maxGain)
    {
        return getMaxGain(maxGain, null, false);
    }

    public boolean
    getMaxGain(Ice.IntHolder maxGain, java.util.Map<String, String> __ctx)
    {
        return getMaxGain(maxGain, __ctx, true);
    }

    private boolean
    getMaxGain(Ice.IntHolder maxGain, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMaxGain");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getMaxGain(maxGain, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getMaxGain_name = "getMaxGain";

    public Ice.AsyncResult begin_getMaxGain()
    {
        return begin_getMaxGain(null, false, null);
    }

    public Ice.AsyncResult begin_getMaxGain(java.util.Map<String, String> __ctx)
    {
        return begin_getMaxGain(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getMaxGain(Ice.Callback __cb)
    {
        return begin_getMaxGain(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMaxGain(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMaxGain(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMaxGain(Callback_PixisICE_getMaxGain __cb)
    {
        return begin_getMaxGain(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMaxGain(java.util.Map<String, String> __ctx, Callback_PixisICE_getMaxGain __cb)
    {
        return begin_getMaxGain(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMaxGain(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMaxGain_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMaxGain_name, __cb);
        try
        {
            __result.__prepare(__getMaxGain_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getMaxGain(Ice.IntHolder maxGain, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getMaxGain_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        maxGain.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getParamList(ParamContainerHolder params)
    {
        return getParamList(params, null, false);
    }

    public boolean
    getParamList(ParamContainerHolder params, java.util.Map<String, String> __ctx)
    {
        return getParamList(params, __ctx, true);
    }

    private boolean
    getParamList(ParamContainerHolder params, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getParamList");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getParamList(params, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getParamList_name = "getParamList";

    public Ice.AsyncResult begin_getParamList()
    {
        return begin_getParamList(null, false, null);
    }

    public Ice.AsyncResult begin_getParamList(java.util.Map<String, String> __ctx)
    {
        return begin_getParamList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getParamList(Ice.Callback __cb)
    {
        return begin_getParamList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getParamList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getParamList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getParamList(Callback_PixisICE_getParamList __cb)
    {
        return begin_getParamList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getParamList(java.util.Map<String, String> __ctx, Callback_PixisICE_getParamList __cb)
    {
        return begin_getParamList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getParamList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getParamList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getParamList_name, __cb);
        try
        {
            __result.__prepare(__getParamList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getParamList(ParamContainerHolder params, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getParamList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        params.value = ParamContainerHelper.read(__is);
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getReadoutPort(Ice.ShortHolder port)
    {
        return getReadoutPort(port, null, false);
    }

    public boolean
    getReadoutPort(Ice.ShortHolder port, java.util.Map<String, String> __ctx)
    {
        return getReadoutPort(port, __ctx, true);
    }

    private boolean
    getReadoutPort(Ice.ShortHolder port, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getReadoutPort");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getReadoutPort(port, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getReadoutPort_name = "getReadoutPort";

    public Ice.AsyncResult begin_getReadoutPort()
    {
        return begin_getReadoutPort(null, false, null);
    }

    public Ice.AsyncResult begin_getReadoutPort(java.util.Map<String, String> __ctx)
    {
        return begin_getReadoutPort(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getReadoutPort(Ice.Callback __cb)
    {
        return begin_getReadoutPort(null, false, __cb);
    }

    public Ice.AsyncResult begin_getReadoutPort(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getReadoutPort(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getReadoutPort(Callback_PixisICE_getReadoutPort __cb)
    {
        return begin_getReadoutPort(null, false, __cb);
    }

    public Ice.AsyncResult begin_getReadoutPort(java.util.Map<String, String> __ctx, Callback_PixisICE_getReadoutPort __cb)
    {
        return begin_getReadoutPort(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getReadoutPort(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getReadoutPort_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getReadoutPort_name, __cb);
        try
        {
            __result.__prepare(__getReadoutPort_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getReadoutPort(Ice.ShortHolder port, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getReadoutPort_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        port.value = __is.readShort();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getReadoutPortEntries(Ice.IntHolder entries)
    {
        return getReadoutPortEntries(entries, null, false);
    }

    public boolean
    getReadoutPortEntries(Ice.IntHolder entries, java.util.Map<String, String> __ctx)
    {
        return getReadoutPortEntries(entries, __ctx, true);
    }

    private boolean
    getReadoutPortEntries(Ice.IntHolder entries, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getReadoutPortEntries");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getReadoutPortEntries(entries, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getReadoutPortEntries_name = "getReadoutPortEntries";

    public Ice.AsyncResult begin_getReadoutPortEntries()
    {
        return begin_getReadoutPortEntries(null, false, null);
    }

    public Ice.AsyncResult begin_getReadoutPortEntries(java.util.Map<String, String> __ctx)
    {
        return begin_getReadoutPortEntries(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getReadoutPortEntries(Ice.Callback __cb)
    {
        return begin_getReadoutPortEntries(null, false, __cb);
    }

    public Ice.AsyncResult begin_getReadoutPortEntries(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getReadoutPortEntries(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getReadoutPortEntries(Callback_PixisICE_getReadoutPortEntries __cb)
    {
        return begin_getReadoutPortEntries(null, false, __cb);
    }

    public Ice.AsyncResult begin_getReadoutPortEntries(java.util.Map<String, String> __ctx, Callback_PixisICE_getReadoutPortEntries __cb)
    {
        return begin_getReadoutPortEntries(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getReadoutPortEntries(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getReadoutPortEntries_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getReadoutPortEntries_name, __cb);
        try
        {
            __result.__prepare(__getReadoutPortEntries_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getReadoutPortEntries(Ice.IntHolder entries, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getReadoutPortEntries_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        entries.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getRetries(Ice.IntHolder retries)
    {
        return getRetries(retries, null, false);
    }

    public boolean
    getRetries(Ice.IntHolder retries, java.util.Map<String, String> __ctx)
    {
        return getRetries(retries, __ctx, true);
    }

    private boolean
    getRetries(Ice.IntHolder retries, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getRetries");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getRetries(retries, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getRetries_name = "getRetries";

    public Ice.AsyncResult begin_getRetries()
    {
        return begin_getRetries(null, false, null);
    }

    public Ice.AsyncResult begin_getRetries(java.util.Map<String, String> __ctx)
    {
        return begin_getRetries(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getRetries(Ice.Callback __cb)
    {
        return begin_getRetries(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRetries(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRetries(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRetries(Callback_PixisICE_getRetries __cb)
    {
        return begin_getRetries(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRetries(java.util.Map<String, String> __ctx, Callback_PixisICE_getRetries __cb)
    {
        return begin_getRetries(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRetries(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRetries_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRetries_name, __cb);
        try
        {
            __result.__prepare(__getRetries_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getRetries(Ice.IntHolder retries, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getRetries_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        retries.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getSensorSize(Ice.ShortHolder xSize, Ice.ShortHolder ySize)
    {
        return getSensorSize(xSize, ySize, null, false);
    }

    public boolean
    getSensorSize(Ice.ShortHolder xSize, Ice.ShortHolder ySize, java.util.Map<String, String> __ctx)
    {
        return getSensorSize(xSize, ySize, __ctx, true);
    }

    private boolean
    getSensorSize(Ice.ShortHolder xSize, Ice.ShortHolder ySize, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSensorSize");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getSensorSize(xSize, ySize, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getSensorSize_name = "getSensorSize";

    public Ice.AsyncResult begin_getSensorSize()
    {
        return begin_getSensorSize(null, false, null);
    }

    public Ice.AsyncResult begin_getSensorSize(java.util.Map<String, String> __ctx)
    {
        return begin_getSensorSize(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getSensorSize(Ice.Callback __cb)
    {
        return begin_getSensorSize(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSensorSize(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSensorSize(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSensorSize(Callback_PixisICE_getSensorSize __cb)
    {
        return begin_getSensorSize(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSensorSize(java.util.Map<String, String> __ctx, Callback_PixisICE_getSensorSize __cb)
    {
        return begin_getSensorSize(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSensorSize(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSensorSize_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSensorSize_name, __cb);
        try
        {
            __result.__prepare(__getSensorSize_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getSensorSize(Ice.ShortHolder xSize, Ice.ShortHolder ySize, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSensorSize_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        xSize.value = __is.readShort();
        ySize.value = __is.readShort();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getShtrCloseDly(Ice.IntHolder shtrCloseDly)
    {
        return getShtrCloseDly(shtrCloseDly, null, false);
    }

    public boolean
    getShtrCloseDly(Ice.IntHolder shtrCloseDly, java.util.Map<String, String> __ctx)
    {
        return getShtrCloseDly(shtrCloseDly, __ctx, true);
    }

    private boolean
    getShtrCloseDly(Ice.IntHolder shtrCloseDly, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getShtrCloseDly");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getShtrCloseDly(shtrCloseDly, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getShtrCloseDly_name = "getShtrCloseDly";

    public Ice.AsyncResult begin_getShtrCloseDly()
    {
        return begin_getShtrCloseDly(null, false, null);
    }

    public Ice.AsyncResult begin_getShtrCloseDly(java.util.Map<String, String> __ctx)
    {
        return begin_getShtrCloseDly(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getShtrCloseDly(Ice.Callback __cb)
    {
        return begin_getShtrCloseDly(null, false, __cb);
    }

    public Ice.AsyncResult begin_getShtrCloseDly(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getShtrCloseDly(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getShtrCloseDly(Callback_PixisICE_getShtrCloseDly __cb)
    {
        return begin_getShtrCloseDly(null, false, __cb);
    }

    public Ice.AsyncResult begin_getShtrCloseDly(java.util.Map<String, String> __ctx, Callback_PixisICE_getShtrCloseDly __cb)
    {
        return begin_getShtrCloseDly(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getShtrCloseDly(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getShtrCloseDly_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getShtrCloseDly_name, __cb);
        try
        {
            __result.__prepare(__getShtrCloseDly_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getShtrCloseDly(Ice.IntHolder shtrCloseDly, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getShtrCloseDly_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        shtrCloseDly.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getShtrOpenDly(Ice.IntHolder shtrOpenDly)
    {
        return getShtrOpenDly(shtrOpenDly, null, false);
    }

    public boolean
    getShtrOpenDly(Ice.IntHolder shtrOpenDly, java.util.Map<String, String> __ctx)
    {
        return getShtrOpenDly(shtrOpenDly, __ctx, true);
    }

    private boolean
    getShtrOpenDly(Ice.IntHolder shtrOpenDly, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getShtrOpenDly");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getShtrOpenDly(shtrOpenDly, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getShtrOpenDly_name = "getShtrOpenDly";

    public Ice.AsyncResult begin_getShtrOpenDly()
    {
        return begin_getShtrOpenDly(null, false, null);
    }

    public Ice.AsyncResult begin_getShtrOpenDly(java.util.Map<String, String> __ctx)
    {
        return begin_getShtrOpenDly(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getShtrOpenDly(Ice.Callback __cb)
    {
        return begin_getShtrOpenDly(null, false, __cb);
    }

    public Ice.AsyncResult begin_getShtrOpenDly(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getShtrOpenDly(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getShtrOpenDly(Callback_PixisICE_getShtrOpenDly __cb)
    {
        return begin_getShtrOpenDly(null, false, __cb);
    }

    public Ice.AsyncResult begin_getShtrOpenDly(java.util.Map<String, String> __ctx, Callback_PixisICE_getShtrOpenDly __cb)
    {
        return begin_getShtrOpenDly(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getShtrOpenDly(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getShtrOpenDly_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getShtrOpenDly_name, __cb);
        try
        {
            __result.__prepare(__getShtrOpenDly_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getShtrOpenDly(Ice.IntHolder shtrOpenDly, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getShtrOpenDly_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        shtrOpenDly.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getShtrStatus(Ice.ShortHolder shtrStatus)
    {
        return getShtrStatus(shtrStatus, null, false);
    }

    public boolean
    getShtrStatus(Ice.ShortHolder shtrStatus, java.util.Map<String, String> __ctx)
    {
        return getShtrStatus(shtrStatus, __ctx, true);
    }

    private boolean
    getShtrStatus(Ice.ShortHolder shtrStatus, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getShtrStatus");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getShtrStatus(shtrStatus, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getShtrStatus_name = "getShtrStatus";

    public Ice.AsyncResult begin_getShtrStatus()
    {
        return begin_getShtrStatus(null, false, null);
    }

    public Ice.AsyncResult begin_getShtrStatus(java.util.Map<String, String> __ctx)
    {
        return begin_getShtrStatus(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getShtrStatus(Ice.Callback __cb)
    {
        return begin_getShtrStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_getShtrStatus(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getShtrStatus(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getShtrStatus(Callback_PixisICE_getShtrStatus __cb)
    {
        return begin_getShtrStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_getShtrStatus(java.util.Map<String, String> __ctx, Callback_PixisICE_getShtrStatus __cb)
    {
        return begin_getShtrStatus(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getShtrStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getShtrStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getShtrStatus_name, __cb);
        try
        {
            __result.__prepare(__getShtrStatus_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getShtrStatus(Ice.ShortHolder shtrStatus, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getShtrStatus_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        shtrStatus.value = __is.readShort();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getSpeed(Ice.IntHolder speed)
    {
        return getSpeed(speed, null, false);
    }

    public boolean
    getSpeed(Ice.IntHolder speed, java.util.Map<String, String> __ctx)
    {
        return getSpeed(speed, __ctx, true);
    }

    private boolean
    getSpeed(Ice.IntHolder speed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSpeed");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getSpeed(speed, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getSpeed_name = "getSpeed";

    public Ice.AsyncResult begin_getSpeed()
    {
        return begin_getSpeed(null, false, null);
    }

    public Ice.AsyncResult begin_getSpeed(java.util.Map<String, String> __ctx)
    {
        return begin_getSpeed(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getSpeed(Ice.Callback __cb)
    {
        return begin_getSpeed(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSpeed(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSpeed(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSpeed(Callback_PixisICE_getSpeed __cb)
    {
        return begin_getSpeed(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSpeed(java.util.Map<String, String> __ctx, Callback_PixisICE_getSpeed __cb)
    {
        return begin_getSpeed(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSpeed(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSpeed_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSpeed_name, __cb);
        try
        {
            __result.__prepare(__getSpeed_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getSpeed(Ice.IntHolder speed, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSpeed_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        speed.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getSpeedEntries(Ice.IntHolder entries)
    {
        return getSpeedEntries(entries, null, false);
    }

    public boolean
    getSpeedEntries(Ice.IntHolder entries, java.util.Map<String, String> __ctx)
    {
        return getSpeedEntries(entries, __ctx, true);
    }

    private boolean
    getSpeedEntries(Ice.IntHolder entries, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSpeedEntries");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getSpeedEntries(entries, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getSpeedEntries_name = "getSpeedEntries";

    public Ice.AsyncResult begin_getSpeedEntries()
    {
        return begin_getSpeedEntries(null, false, null);
    }

    public Ice.AsyncResult begin_getSpeedEntries(java.util.Map<String, String> __ctx)
    {
        return begin_getSpeedEntries(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getSpeedEntries(Ice.Callback __cb)
    {
        return begin_getSpeedEntries(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSpeedEntries(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSpeedEntries(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSpeedEntries(Callback_PixisICE_getSpeedEntries __cb)
    {
        return begin_getSpeedEntries(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSpeedEntries(java.util.Map<String, String> __ctx, Callback_PixisICE_getSpeedEntries __cb)
    {
        return begin_getSpeedEntries(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSpeedEntries(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSpeedEntries_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSpeedEntries_name, __cb);
        try
        {
            __result.__prepare(__getSpeedEntries_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getSpeedEntries(Ice.IntHolder entries, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSpeedEntries_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        entries.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getSpeedMode(Ice.ShortHolder speed)
    {
        return getSpeedMode(speed, null, false);
    }

    public boolean
    getSpeedMode(Ice.ShortHolder speed, java.util.Map<String, String> __ctx)
    {
        return getSpeedMode(speed, __ctx, true);
    }

    private boolean
    getSpeedMode(Ice.ShortHolder speed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSpeedMode");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getSpeedMode(speed, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getSpeedMode_name = "getSpeedMode";

    public Ice.AsyncResult begin_getSpeedMode()
    {
        return begin_getSpeedMode(null, false, null);
    }

    public Ice.AsyncResult begin_getSpeedMode(java.util.Map<String, String> __ctx)
    {
        return begin_getSpeedMode(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getSpeedMode(Ice.Callback __cb)
    {
        return begin_getSpeedMode(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSpeedMode(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSpeedMode(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSpeedMode(Callback_PixisICE_getSpeedMode __cb)
    {
        return begin_getSpeedMode(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSpeedMode(java.util.Map<String, String> __ctx, Callback_PixisICE_getSpeedMode __cb)
    {
        return begin_getSpeedMode(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSpeedMode(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSpeedMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSpeedMode_name, __cb);
        try
        {
            __result.__prepare(__getSpeedMode_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getSpeedMode(Ice.ShortHolder speed, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSpeedMode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        speed.value = __is.readShort();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getTimeout(Ice.IntHolder mSec)
    {
        return getTimeout(mSec, null, false);
    }

    public boolean
    getTimeout(Ice.IntHolder mSec, java.util.Map<String, String> __ctx)
    {
        return getTimeout(mSec, __ctx, true);
    }

    private boolean
    getTimeout(Ice.IntHolder mSec, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTimeout");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getTimeout(mSec, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getTimeout_name = "getTimeout";

    public Ice.AsyncResult begin_getTimeout()
    {
        return begin_getTimeout(null, false, null);
    }

    public Ice.AsyncResult begin_getTimeout(java.util.Map<String, String> __ctx)
    {
        return begin_getTimeout(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTimeout(Ice.Callback __cb)
    {
        return begin_getTimeout(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTimeout(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTimeout(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTimeout(Callback_PixisICE_getTimeout __cb)
    {
        return begin_getTimeout(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTimeout(java.util.Map<String, String> __ctx, Callback_PixisICE_getTimeout __cb)
    {
        return begin_getTimeout(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTimeout(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTimeout_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTimeout_name, __cb);
        try
        {
            __result.__prepare(__getTimeout_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getTimeout(Ice.IntHolder mSec, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTimeout_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        mSec.value = __is.readInt();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getTmp(Ice.FloatHolder curTmp)
    {
        return getTmp(curTmp, null, false);
    }

    public boolean
    getTmp(Ice.FloatHolder curTmp, java.util.Map<String, String> __ctx)
    {
        return getTmp(curTmp, __ctx, true);
    }

    private boolean
    getTmp(Ice.FloatHolder curTmp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTmp");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getTmp(curTmp, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getTmp_name = "getTmp";

    public Ice.AsyncResult begin_getTmp()
    {
        return begin_getTmp(null, false, null);
    }

    public Ice.AsyncResult begin_getTmp(java.util.Map<String, String> __ctx)
    {
        return begin_getTmp(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTmp(Ice.Callback __cb)
    {
        return begin_getTmp(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTmp(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTmp(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTmp(Callback_PixisICE_getTmp __cb)
    {
        return begin_getTmp(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTmp(java.util.Map<String, String> __ctx, Callback_PixisICE_getTmp __cb)
    {
        return begin_getTmp(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTmp(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTmp_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTmp_name, __cb);
        try
        {
            __result.__prepare(__getTmp_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getTmp(Ice.FloatHolder curTmp, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTmp_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        curTmp.value = __is.readFloat();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    getTmpSetpoint(Ice.FloatHolder tmpSetpoint)
    {
        return getTmpSetpoint(tmpSetpoint, null, false);
    }

    public boolean
    getTmpSetpoint(Ice.FloatHolder tmpSetpoint, java.util.Map<String, String> __ctx)
    {
        return getTmpSetpoint(tmpSetpoint, __ctx, true);
    }

    private boolean
    getTmpSetpoint(Ice.FloatHolder tmpSetpoint, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTmpSetpoint");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.getTmpSetpoint(tmpSetpoint, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getTmpSetpoint_name = "getTmpSetpoint";

    public Ice.AsyncResult begin_getTmpSetpoint()
    {
        return begin_getTmpSetpoint(null, false, null);
    }

    public Ice.AsyncResult begin_getTmpSetpoint(java.util.Map<String, String> __ctx)
    {
        return begin_getTmpSetpoint(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTmpSetpoint(Ice.Callback __cb)
    {
        return begin_getTmpSetpoint(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTmpSetpoint(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTmpSetpoint(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTmpSetpoint(Callback_PixisICE_getTmpSetpoint __cb)
    {
        return begin_getTmpSetpoint(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTmpSetpoint(java.util.Map<String, String> __ctx, Callback_PixisICE_getTmpSetpoint __cb)
    {
        return begin_getTmpSetpoint(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTmpSetpoint(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTmpSetpoint_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTmpSetpoint_name, __cb);
        try
        {
            __result.__prepare(__getTmpSetpoint_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getTmpSetpoint(Ice.FloatHolder tmpSetpoint, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTmpSetpoint_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        tmpSetpoint.value = __is.readFloat();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    initCamera(int index)
        throws CamException
    {
        return initCamera(index, null, false);
    }

    public boolean
    initCamera(int index, java.util.Map<String, String> __ctx)
        throws CamException
    {
        return initCamera(index, __ctx, true);
    }

    private boolean
    initCamera(int index, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws CamException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("initCamera");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.initCamera(index, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __initCamera_name = "initCamera";

    public Ice.AsyncResult begin_initCamera(int index)
    {
        return begin_initCamera(index, null, false, null);
    }

    public Ice.AsyncResult begin_initCamera(int index, java.util.Map<String, String> __ctx)
    {
        return begin_initCamera(index, __ctx, true, null);
    }

    public Ice.AsyncResult begin_initCamera(int index, Ice.Callback __cb)
    {
        return begin_initCamera(index, null, false, __cb);
    }

    public Ice.AsyncResult begin_initCamera(int index, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_initCamera(index, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_initCamera(int index, Callback_PixisICE_initCamera __cb)
    {
        return begin_initCamera(index, null, false, __cb);
    }

    public Ice.AsyncResult begin_initCamera(int index, java.util.Map<String, String> __ctx, Callback_PixisICE_initCamera __cb)
    {
        return begin_initCamera(index, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_initCamera(int index, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__initCamera_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __initCamera_name, __cb);
        try
        {
            __result.__prepare(__initCamera_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(index);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_initCamera(Ice.AsyncResult __result)
        throws CamException
    {
        Ice.AsyncResult.__check(__result, this, __initCamera_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(CamException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setClearCycles(int clearCycles)
    {
        return setClearCycles(clearCycles, null, false);
    }

    public boolean
    setClearCycles(int clearCycles, java.util.Map<String, String> __ctx)
    {
        return setClearCycles(clearCycles, __ctx, true);
    }

    private boolean
    setClearCycles(int clearCycles, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setClearCycles");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.setClearCycles(clearCycles, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setClearCycles_name = "setClearCycles";

    public Ice.AsyncResult begin_setClearCycles(int clearCycles)
    {
        return begin_setClearCycles(clearCycles, null, false, null);
    }

    public Ice.AsyncResult begin_setClearCycles(int clearCycles, java.util.Map<String, String> __ctx)
    {
        return begin_setClearCycles(clearCycles, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setClearCycles(int clearCycles, Ice.Callback __cb)
    {
        return begin_setClearCycles(clearCycles, null, false, __cb);
    }

    public Ice.AsyncResult begin_setClearCycles(int clearCycles, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setClearCycles(clearCycles, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setClearCycles(int clearCycles, Callback_PixisICE_setClearCycles __cb)
    {
        return begin_setClearCycles(clearCycles, null, false, __cb);
    }

    public Ice.AsyncResult begin_setClearCycles(int clearCycles, java.util.Map<String, String> __ctx, Callback_PixisICE_setClearCycles __cb)
    {
        return begin_setClearCycles(clearCycles, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setClearCycles(int clearCycles, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setClearCycles_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setClearCycles_name, __cb);
        try
        {
            __result.__prepare(__setClearCycles_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(clearCycles);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setClearCycles(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setClearCycles_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setClearStrips(int strips)
    {
        return setClearStrips(strips, null, false);
    }

    public boolean
    setClearStrips(int strips, java.util.Map<String, String> __ctx)
    {
        return setClearStrips(strips, __ctx, true);
    }

    private boolean
    setClearStrips(int strips, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setClearStrips");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.setClearStrips(strips, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setClearStrips_name = "setClearStrips";

    public Ice.AsyncResult begin_setClearStrips(int strips)
    {
        return begin_setClearStrips(strips, null, false, null);
    }

    public Ice.AsyncResult begin_setClearStrips(int strips, java.util.Map<String, String> __ctx)
    {
        return begin_setClearStrips(strips, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setClearStrips(int strips, Ice.Callback __cb)
    {
        return begin_setClearStrips(strips, null, false, __cb);
    }

    public Ice.AsyncResult begin_setClearStrips(int strips, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setClearStrips(strips, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setClearStrips(int strips, Callback_PixisICE_setClearStrips __cb)
    {
        return begin_setClearStrips(strips, null, false, __cb);
    }

    public Ice.AsyncResult begin_setClearStrips(int strips, java.util.Map<String, String> __ctx, Callback_PixisICE_setClearStrips __cb)
    {
        return begin_setClearStrips(strips, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setClearStrips(int strips, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setClearStrips_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setClearStrips_name, __cb);
        try
        {
            __result.__prepare(__setClearStrips_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(strips);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setClearStrips(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setClearStrips_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setGain(int gain)
    {
        return setGain(gain, null, false);
    }

    public boolean
    setGain(int gain, java.util.Map<String, String> __ctx)
    {
        return setGain(gain, __ctx, true);
    }

    private boolean
    setGain(int gain, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setGain");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.setGain(gain, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setGain_name = "setGain";

    public Ice.AsyncResult begin_setGain(int gain)
    {
        return begin_setGain(gain, null, false, null);
    }

    public Ice.AsyncResult begin_setGain(int gain, java.util.Map<String, String> __ctx)
    {
        return begin_setGain(gain, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setGain(int gain, Ice.Callback __cb)
    {
        return begin_setGain(gain, null, false, __cb);
    }

    public Ice.AsyncResult begin_setGain(int gain, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setGain(gain, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setGain(int gain, Callback_PixisICE_setGain __cb)
    {
        return begin_setGain(gain, null, false, __cb);
    }

    public Ice.AsyncResult begin_setGain(int gain, java.util.Map<String, String> __ctx, Callback_PixisICE_setGain __cb)
    {
        return begin_setGain(gain, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setGain(int gain, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setGain_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setGain_name, __cb);
        try
        {
            __result.__prepare(__setGain_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(gain);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setGain(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setGain_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setGainMultEnable(int enabled)
    {
        return setGainMultEnable(enabled, null, false);
    }

    public boolean
    setGainMultEnable(int enabled, java.util.Map<String, String> __ctx)
    {
        return setGainMultEnable(enabled, __ctx, true);
    }

    private boolean
    setGainMultEnable(int enabled, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setGainMultEnable");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.setGainMultEnable(enabled, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setGainMultEnable_name = "setGainMultEnable";

    public Ice.AsyncResult begin_setGainMultEnable(int enabled)
    {
        return begin_setGainMultEnable(enabled, null, false, null);
    }

    public Ice.AsyncResult begin_setGainMultEnable(int enabled, java.util.Map<String, String> __ctx)
    {
        return begin_setGainMultEnable(enabled, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setGainMultEnable(int enabled, Ice.Callback __cb)
    {
        return begin_setGainMultEnable(enabled, null, false, __cb);
    }

    public Ice.AsyncResult begin_setGainMultEnable(int enabled, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setGainMultEnable(enabled, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setGainMultEnable(int enabled, Callback_PixisICE_setGainMultEnable __cb)
    {
        return begin_setGainMultEnable(enabled, null, false, __cb);
    }

    public Ice.AsyncResult begin_setGainMultEnable(int enabled, java.util.Map<String, String> __ctx, Callback_PixisICE_setGainMultEnable __cb)
    {
        return begin_setGainMultEnable(enabled, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setGainMultEnable(int enabled, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setGainMultEnable_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setGainMultEnable_name, __cb);
        try
        {
            __result.__prepare(__setGainMultEnable_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(enabled);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setGainMultEnable(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setGainMultEnable_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setGainMultFactor(int factor)
    {
        return setGainMultFactor(factor, null, false);
    }

    public boolean
    setGainMultFactor(int factor, java.util.Map<String, String> __ctx)
    {
        return setGainMultFactor(factor, __ctx, true);
    }

    private boolean
    setGainMultFactor(int factor, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setGainMultFactor");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.setGainMultFactor(factor, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setGainMultFactor_name = "setGainMultFactor";

    public Ice.AsyncResult begin_setGainMultFactor(int factor)
    {
        return begin_setGainMultFactor(factor, null, false, null);
    }

    public Ice.AsyncResult begin_setGainMultFactor(int factor, java.util.Map<String, String> __ctx)
    {
        return begin_setGainMultFactor(factor, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setGainMultFactor(int factor, Ice.Callback __cb)
    {
        return begin_setGainMultFactor(factor, null, false, __cb);
    }

    public Ice.AsyncResult begin_setGainMultFactor(int factor, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setGainMultFactor(factor, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setGainMultFactor(int factor, Callback_PixisICE_setGainMultFactor __cb)
    {
        return begin_setGainMultFactor(factor, null, false, __cb);
    }

    public Ice.AsyncResult begin_setGainMultFactor(int factor, java.util.Map<String, String> __ctx, Callback_PixisICE_setGainMultFactor __cb)
    {
        return begin_setGainMultFactor(factor, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setGainMultFactor(int factor, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setGainMultFactor_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setGainMultFactor_name, __cb);
        try
        {
            __result.__prepare(__setGainMultFactor_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(factor);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setGainMultFactor(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setGainMultFactor_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setReadoutport(short port)
    {
        return setReadoutport(port, null, false);
    }

    public boolean
    setReadoutport(short port, java.util.Map<String, String> __ctx)
    {
        return setReadoutport(port, __ctx, true);
    }

    private boolean
    setReadoutport(short port, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setReadoutport");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.setReadoutport(port, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setReadoutport_name = "setReadoutport";

    public Ice.AsyncResult begin_setReadoutport(short port)
    {
        return begin_setReadoutport(port, null, false, null);
    }

    public Ice.AsyncResult begin_setReadoutport(short port, java.util.Map<String, String> __ctx)
    {
        return begin_setReadoutport(port, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setReadoutport(short port, Ice.Callback __cb)
    {
        return begin_setReadoutport(port, null, false, __cb);
    }

    public Ice.AsyncResult begin_setReadoutport(short port, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setReadoutport(port, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setReadoutport(short port, Callback_PixisICE_setReadoutport __cb)
    {
        return begin_setReadoutport(port, null, false, __cb);
    }

    public Ice.AsyncResult begin_setReadoutport(short port, java.util.Map<String, String> __ctx, Callback_PixisICE_setReadoutport __cb)
    {
        return begin_setReadoutport(port, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setReadoutport(short port, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setReadoutport_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setReadoutport_name, __cb);
        try
        {
            __result.__prepare(__setReadoutport_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeShort(port);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setReadoutport(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setReadoutport_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setRetries(int retries)
    {
        return setRetries(retries, null, false);
    }

    public boolean
    setRetries(int retries, java.util.Map<String, String> __ctx)
    {
        return setRetries(retries, __ctx, true);
    }

    private boolean
    setRetries(int retries, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setRetries");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.setRetries(retries, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setRetries_name = "setRetries";

    public Ice.AsyncResult begin_setRetries(int retries)
    {
        return begin_setRetries(retries, null, false, null);
    }

    public Ice.AsyncResult begin_setRetries(int retries, java.util.Map<String, String> __ctx)
    {
        return begin_setRetries(retries, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setRetries(int retries, Ice.Callback __cb)
    {
        return begin_setRetries(retries, null, false, __cb);
    }

    public Ice.AsyncResult begin_setRetries(int retries, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setRetries(retries, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setRetries(int retries, Callback_PixisICE_setRetries __cb)
    {
        return begin_setRetries(retries, null, false, __cb);
    }

    public Ice.AsyncResult begin_setRetries(int retries, java.util.Map<String, String> __ctx, Callback_PixisICE_setRetries __cb)
    {
        return begin_setRetries(retries, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setRetries(int retries, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setRetries_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setRetries_name, __cb);
        try
        {
            __result.__prepare(__setRetries_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(retries);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setRetries(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setRetries_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setShtrCloseDly(int shtrCloseDly)
    {
        return setShtrCloseDly(shtrCloseDly, null, false);
    }

    public boolean
    setShtrCloseDly(int shtrCloseDly, java.util.Map<String, String> __ctx)
    {
        return setShtrCloseDly(shtrCloseDly, __ctx, true);
    }

    private boolean
    setShtrCloseDly(int shtrCloseDly, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setShtrCloseDly");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.setShtrCloseDly(shtrCloseDly, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setShtrCloseDly_name = "setShtrCloseDly";

    public Ice.AsyncResult begin_setShtrCloseDly(int shtrCloseDly)
    {
        return begin_setShtrCloseDly(shtrCloseDly, null, false, null);
    }

    public Ice.AsyncResult begin_setShtrCloseDly(int shtrCloseDly, java.util.Map<String, String> __ctx)
    {
        return begin_setShtrCloseDly(shtrCloseDly, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setShtrCloseDly(int shtrCloseDly, Ice.Callback __cb)
    {
        return begin_setShtrCloseDly(shtrCloseDly, null, false, __cb);
    }

    public Ice.AsyncResult begin_setShtrCloseDly(int shtrCloseDly, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setShtrCloseDly(shtrCloseDly, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setShtrCloseDly(int shtrCloseDly, Callback_PixisICE_setShtrCloseDly __cb)
    {
        return begin_setShtrCloseDly(shtrCloseDly, null, false, __cb);
    }

    public Ice.AsyncResult begin_setShtrCloseDly(int shtrCloseDly, java.util.Map<String, String> __ctx, Callback_PixisICE_setShtrCloseDly __cb)
    {
        return begin_setShtrCloseDly(shtrCloseDly, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setShtrCloseDly(int shtrCloseDly, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setShtrCloseDly_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setShtrCloseDly_name, __cb);
        try
        {
            __result.__prepare(__setShtrCloseDly_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(shtrCloseDly);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setShtrCloseDly(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setShtrCloseDly_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setShtrOpenDly(int shtrOpenDly)
    {
        return setShtrOpenDly(shtrOpenDly, null, false);
    }

    public boolean
    setShtrOpenDly(int shtrOpenDly, java.util.Map<String, String> __ctx)
    {
        return setShtrOpenDly(shtrOpenDly, __ctx, true);
    }

    private boolean
    setShtrOpenDly(int shtrOpenDly, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setShtrOpenDly");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.setShtrOpenDly(shtrOpenDly, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setShtrOpenDly_name = "setShtrOpenDly";

    public Ice.AsyncResult begin_setShtrOpenDly(int shtrOpenDly)
    {
        return begin_setShtrOpenDly(shtrOpenDly, null, false, null);
    }

    public Ice.AsyncResult begin_setShtrOpenDly(int shtrOpenDly, java.util.Map<String, String> __ctx)
    {
        return begin_setShtrOpenDly(shtrOpenDly, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setShtrOpenDly(int shtrOpenDly, Ice.Callback __cb)
    {
        return begin_setShtrOpenDly(shtrOpenDly, null, false, __cb);
    }

    public Ice.AsyncResult begin_setShtrOpenDly(int shtrOpenDly, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setShtrOpenDly(shtrOpenDly, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setShtrOpenDly(int shtrOpenDly, Callback_PixisICE_setShtrOpenDly __cb)
    {
        return begin_setShtrOpenDly(shtrOpenDly, null, false, __cb);
    }

    public Ice.AsyncResult begin_setShtrOpenDly(int shtrOpenDly, java.util.Map<String, String> __ctx, Callback_PixisICE_setShtrOpenDly __cb)
    {
        return begin_setShtrOpenDly(shtrOpenDly, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setShtrOpenDly(int shtrOpenDly, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setShtrOpenDly_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setShtrOpenDly_name, __cb);
        try
        {
            __result.__prepare(__setShtrOpenDly_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(shtrOpenDly);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setShtrOpenDly(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setShtrOpenDly_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setSpeedMode(short speed)
    {
        return setSpeedMode(speed, null, false);
    }

    public boolean
    setSpeedMode(short speed, java.util.Map<String, String> __ctx)
    {
        return setSpeedMode(speed, __ctx, true);
    }

    private boolean
    setSpeedMode(short speed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setSpeedMode");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.setSpeedMode(speed, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setSpeedMode_name = "setSpeedMode";

    public Ice.AsyncResult begin_setSpeedMode(short speed)
    {
        return begin_setSpeedMode(speed, null, false, null);
    }

    public Ice.AsyncResult begin_setSpeedMode(short speed, java.util.Map<String, String> __ctx)
    {
        return begin_setSpeedMode(speed, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setSpeedMode(short speed, Ice.Callback __cb)
    {
        return begin_setSpeedMode(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSpeedMode(short speed, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setSpeedMode(speed, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setSpeedMode(short speed, Callback_PixisICE_setSpeedMode __cb)
    {
        return begin_setSpeedMode(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSpeedMode(short speed, java.util.Map<String, String> __ctx, Callback_PixisICE_setSpeedMode __cb)
    {
        return begin_setSpeedMode(speed, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setSpeedMode(short speed, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setSpeedMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setSpeedMode_name, __cb);
        try
        {
            __result.__prepare(__setSpeedMode_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeShort(speed);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setSpeedMode(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setSpeedMode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setTimeout(int mSec)
    {
        return setTimeout(mSec, null, false);
    }

    public boolean
    setTimeout(int mSec, java.util.Map<String, String> __ctx)
    {
        return setTimeout(mSec, __ctx, true);
    }

    private boolean
    setTimeout(int mSec, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTimeout");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.setTimeout(mSec, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setTimeout_name = "setTimeout";

    public Ice.AsyncResult begin_setTimeout(int mSec)
    {
        return begin_setTimeout(mSec, null, false, null);
    }

    public Ice.AsyncResult begin_setTimeout(int mSec, java.util.Map<String, String> __ctx)
    {
        return begin_setTimeout(mSec, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTimeout(int mSec, Ice.Callback __cb)
    {
        return begin_setTimeout(mSec, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTimeout(int mSec, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTimeout(mSec, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTimeout(int mSec, Callback_PixisICE_setTimeout __cb)
    {
        return begin_setTimeout(mSec, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTimeout(int mSec, java.util.Map<String, String> __ctx, Callback_PixisICE_setTimeout __cb)
    {
        return begin_setTimeout(mSec, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTimeout(int mSec, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setTimeout_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTimeout_name, __cb);
        try
        {
            __result.__prepare(__setTimeout_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(mSec);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setTimeout(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setTimeout_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setTmpSetpoint(float tmpSetpoint)
    {
        return setTmpSetpoint(tmpSetpoint, null, false);
    }

    public boolean
    setTmpSetpoint(float tmpSetpoint, java.util.Map<String, String> __ctx)
    {
        return setTmpSetpoint(tmpSetpoint, __ctx, true);
    }

    private boolean
    setTmpSetpoint(float tmpSetpoint, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTmpSetpoint");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.setTmpSetpoint(tmpSetpoint, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setTmpSetpoint_name = "setTmpSetpoint";

    public Ice.AsyncResult begin_setTmpSetpoint(float tmpSetpoint)
    {
        return begin_setTmpSetpoint(tmpSetpoint, null, false, null);
    }

    public Ice.AsyncResult begin_setTmpSetpoint(float tmpSetpoint, java.util.Map<String, String> __ctx)
    {
        return begin_setTmpSetpoint(tmpSetpoint, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTmpSetpoint(float tmpSetpoint, Ice.Callback __cb)
    {
        return begin_setTmpSetpoint(tmpSetpoint, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTmpSetpoint(float tmpSetpoint, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTmpSetpoint(tmpSetpoint, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTmpSetpoint(float tmpSetpoint, Callback_PixisICE_setTmpSetpoint __cb)
    {
        return begin_setTmpSetpoint(tmpSetpoint, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTmpSetpoint(float tmpSetpoint, java.util.Map<String, String> __ctx, Callback_PixisICE_setTmpSetpoint __cb)
    {
        return begin_setTmpSetpoint(tmpSetpoint, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTmpSetpoint(float tmpSetpoint, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setTmpSetpoint_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTmpSetpoint_name, __cb);
        try
        {
            __result.__prepare(__setTmpSetpoint_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeFloat(tmpSetpoint);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setTmpSetpoint(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setTmpSetpoint_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    shtrOpenNever()
    {
        return shtrOpenNever(null, false);
    }

    public boolean
    shtrOpenNever(java.util.Map<String, String> __ctx)
    {
        return shtrOpenNever(__ctx, true);
    }

    private boolean
    shtrOpenNever(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("shtrOpenNever");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.shtrOpenNever(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __shtrOpenNever_name = "shtrOpenNever";

    public Ice.AsyncResult begin_shtrOpenNever()
    {
        return begin_shtrOpenNever(null, false, null);
    }

    public Ice.AsyncResult begin_shtrOpenNever(java.util.Map<String, String> __ctx)
    {
        return begin_shtrOpenNever(__ctx, true, null);
    }

    public Ice.AsyncResult begin_shtrOpenNever(Ice.Callback __cb)
    {
        return begin_shtrOpenNever(null, false, __cb);
    }

    public Ice.AsyncResult begin_shtrOpenNever(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_shtrOpenNever(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_shtrOpenNever(Callback_PixisICE_shtrOpenNever __cb)
    {
        return begin_shtrOpenNever(null, false, __cb);
    }

    public Ice.AsyncResult begin_shtrOpenNever(java.util.Map<String, String> __ctx, Callback_PixisICE_shtrOpenNever __cb)
    {
        return begin_shtrOpenNever(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_shtrOpenNever(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__shtrOpenNever_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __shtrOpenNever_name, __cb);
        try
        {
            __result.__prepare(__shtrOpenNever_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_shtrOpenNever(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __shtrOpenNever_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    shtrOpenNormal()
    {
        return shtrOpenNormal(null, false);
    }

    public boolean
    shtrOpenNormal(java.util.Map<String, String> __ctx)
    {
        return shtrOpenNormal(__ctx, true);
    }

    private boolean
    shtrOpenNormal(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("shtrOpenNormal");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.shtrOpenNormal(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __shtrOpenNormal_name = "shtrOpenNormal";

    public Ice.AsyncResult begin_shtrOpenNormal()
    {
        return begin_shtrOpenNormal(null, false, null);
    }

    public Ice.AsyncResult begin_shtrOpenNormal(java.util.Map<String, String> __ctx)
    {
        return begin_shtrOpenNormal(__ctx, true, null);
    }

    public Ice.AsyncResult begin_shtrOpenNormal(Ice.Callback __cb)
    {
        return begin_shtrOpenNormal(null, false, __cb);
    }

    public Ice.AsyncResult begin_shtrOpenNormal(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_shtrOpenNormal(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_shtrOpenNormal(Callback_PixisICE_shtrOpenNormal __cb)
    {
        return begin_shtrOpenNormal(null, false, __cb);
    }

    public Ice.AsyncResult begin_shtrOpenNormal(java.util.Map<String, String> __ctx, Callback_PixisICE_shtrOpenNormal __cb)
    {
        return begin_shtrOpenNormal(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_shtrOpenNormal(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__shtrOpenNormal_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __shtrOpenNormal_name, __cb);
        try
        {
            __result.__prepare(__shtrOpenNormal_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_shtrOpenNormal(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __shtrOpenNormal_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    uninitCamera()
    {
        return uninitCamera(null, false);
    }

    public boolean
    uninitCamera(java.util.Map<String, String> __ctx)
    {
        return uninitCamera(__ctx, true);
    }

    private boolean
    uninitCamera(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("uninitCamera");
                __delBase = __getDelegate(false);
                _PixisICEDel __del = (_PixisICEDel)__delBase;
                return __del.uninitCamera(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __uninitCamera_name = "uninitCamera";

    public Ice.AsyncResult begin_uninitCamera()
    {
        return begin_uninitCamera(null, false, null);
    }

    public Ice.AsyncResult begin_uninitCamera(java.util.Map<String, String> __ctx)
    {
        return begin_uninitCamera(__ctx, true, null);
    }

    public Ice.AsyncResult begin_uninitCamera(Ice.Callback __cb)
    {
        return begin_uninitCamera(null, false, __cb);
    }

    public Ice.AsyncResult begin_uninitCamera(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_uninitCamera(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_uninitCamera(Callback_PixisICE_uninitCamera __cb)
    {
        return begin_uninitCamera(null, false, __cb);
    }

    public Ice.AsyncResult begin_uninitCamera(java.util.Map<String, String> __ctx, Callback_PixisICE_uninitCamera __cb)
    {
        return begin_uninitCamera(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_uninitCamera(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__uninitCamera_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __uninitCamera_name, __cb);
        try
        {
            __result.__prepare(__uninitCamera_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_uninitCamera(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __uninitCamera_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public static PixisICEPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        PixisICEPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (PixisICEPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    PixisICEPrxHelper __h = new PixisICEPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PixisICEPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        PixisICEPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (PixisICEPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    PixisICEPrxHelper __h = new PixisICEPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PixisICEPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PixisICEPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    PixisICEPrxHelper __h = new PixisICEPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PixisICEPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        PixisICEPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    PixisICEPrxHelper __h = new PixisICEPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PixisICEPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        PixisICEPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (PixisICEPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                PixisICEPrxHelper __h = new PixisICEPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static PixisICEPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PixisICEPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            PixisICEPrxHelper __h = new PixisICEPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cxro::common::device::Pixis::PixisICE"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _PixisICEDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _PixisICEDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, PixisICEPrx v)
    {
        __os.writeProxy(v);
    }

    public static PixisICEPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PixisICEPrxHelper result = new PixisICEPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}

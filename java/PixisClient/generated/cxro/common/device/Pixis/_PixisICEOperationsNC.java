// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_PixisICEOperationsNC.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package cxro.common.device.Pixis;

public interface _PixisICEOperationsNC
{
    boolean initCamera(int index)
        throws CamException;

    boolean uninitCamera();

    boolean getSensorSize(Ice.ShortHolder xSize, Ice.ShortHolder ySize);

    boolean expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin);

    boolean expStart();

    boolean expCheckStatus();

    boolean expGetFrame(ImageContainerHolder image);

    boolean expHalt(short camState);

    boolean contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin);

    boolean contCheckStatus()
        throws CamException;

    boolean contHalt(short camState);

    boolean contGetFrame(ImageContainerHolder image);

    boolean getError(Ice.StringHolder error);

    boolean getParamList(ParamContainerHolder params);

    boolean getCcsStatus(Ice.IntHolder ccsStatus);

    boolean getShtrStatus(Ice.ShortHolder shtrStatus);

    boolean shtrOpenNever();

    boolean shtrOpenNormal();

    boolean getShtrOpenDly(Ice.IntHolder shtrOpenDly);

    boolean setShtrOpenDly(int shtrOpenDly);

    boolean getShtrCloseDly(Ice.IntHolder shtrCloseDly);

    boolean setShtrCloseDly(int shtrCloseDly);

    boolean getClearCycles(Ice.IntHolder cycles);

    boolean setClearCycles(int clearCycles);

    boolean getClearStrips(Ice.IntHolder strips);

    boolean setClearStrips(int strips);

    boolean getTmp(Ice.FloatHolder curTmp);

    boolean getTmpSetpoint(Ice.FloatHolder tmpSetpoint);

    boolean setTmpSetpoint(float tmpSetpoint);

    boolean getMaxGain(Ice.IntHolder maxGain);

    boolean getGain(Ice.IntHolder gain);

    boolean setGain(int gain);

    boolean getGainMultEnable(Ice.IntHolder enabled);

    boolean setGainMultEnable(int enabled);

    boolean getGainMultFactor(Ice.IntHolder factor);

    boolean setGainMultFactor(int factor);

    boolean getSpeed(Ice.IntHolder speed);

    boolean getSpeedEntries(Ice.IntHolder entries);

    boolean getReadoutPortEntries(Ice.IntHolder entries);

    boolean getBits(Ice.IntHolder bits);

    boolean getSpeedMode(Ice.ShortHolder speed);

    boolean setSpeedMode(short speed);

    boolean getReadoutPort(Ice.ShortHolder port);

    boolean setReadoutport(short port);

    boolean getRetries(Ice.IntHolder retries);

    boolean setRetries(int retries);

    boolean getTimeout(Ice.IntHolder mSec);

    boolean setTimeout(int mSec);

    boolean getFrameCapable(Ice.IntHolder frameCapable);
}

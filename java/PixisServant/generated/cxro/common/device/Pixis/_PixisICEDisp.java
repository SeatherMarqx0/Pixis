// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_PixisICEDisp.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package cxro.common.device.Pixis;

public abstract class _PixisICEDisp extends Ice.ObjectImpl implements PixisICE
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cxro::common::device::Pixis::PixisICE"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[1];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    public final boolean
    contCheckStatus()
        throws CamException
    {
        return contCheckStatus(null);
    }

    public final boolean
    contGetFrame(ImageContainerHolder image)
    {
        return contGetFrame(image, null);
    }

    public final boolean
    contHalt(short camState)
    {
        return contHalt(camState, null);
    }

    public final boolean
    contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin)
    {
        return contStart(exposureTime, x0, x1, y0, y1, xbin, ybin, null);
    }

    public final boolean
    expCheckStatus()
    {
        return expCheckStatus(null);
    }

    public final boolean
    expGetFrame(ImageContainerHolder image)
    {
        return expGetFrame(image, null);
    }

    public final boolean
    expHalt(short camState)
    {
        return expHalt(camState, null);
    }

    public final boolean
    expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin)
    {
        return expSetup(exposureTime, x0, x1, y0, y1, xbin, ybin, null);
    }

    public final boolean
    expStart()
    {
        return expStart(null);
    }

    public final boolean
    getBits(Ice.IntHolder bits)
    {
        return getBits(bits, null);
    }

    public final boolean
    getCcsStatus(Ice.IntHolder ccsStatus)
    {
        return getCcsStatus(ccsStatus, null);
    }

    public final boolean
    getClearCycles(Ice.IntHolder cycles)
    {
        return getClearCycles(cycles, null);
    }

    public final boolean
    getClearStrips(Ice.IntHolder strips)
    {
        return getClearStrips(strips, null);
    }

    public final boolean
    getError(Ice.StringHolder error)
    {
        return getError(error, null);
    }

    public final boolean
    getFrameCapable(Ice.IntHolder frameCapable)
    {
        return getFrameCapable(frameCapable, null);
    }

    public final boolean
    getGain(Ice.IntHolder gain)
    {
        return getGain(gain, null);
    }

    public final boolean
    getGainMultEnable(Ice.IntHolder enabled)
    {
        return getGainMultEnable(enabled, null);
    }

    public final boolean
    getGainMultFactor(Ice.IntHolder factor)
    {
        return getGainMultFactor(factor, null);
    }

    public final boolean
    getMaxGain(Ice.IntHolder maxGain)
    {
        return getMaxGain(maxGain, null);
    }

    public final boolean
    getParamList(ParamContainerHolder params)
    {
        return getParamList(params, null);
    }

    public final boolean
    getReadoutPort(Ice.ShortHolder port)
    {
        return getReadoutPort(port, null);
    }

    public final boolean
    getReadoutPortEntries(Ice.IntHolder entries)
    {
        return getReadoutPortEntries(entries, null);
    }

    public final boolean
    getRetries(Ice.IntHolder retries)
    {
        return getRetries(retries, null);
    }

    public final boolean
    getSensorSize(Ice.ShortHolder xSize, Ice.ShortHolder ySize)
    {
        return getSensorSize(xSize, ySize, null);
    }

    public final boolean
    getShtrCloseDly(Ice.IntHolder shtrCloseDly)
    {
        return getShtrCloseDly(shtrCloseDly, null);
    }

    public final boolean
    getShtrOpenDly(Ice.IntHolder shtrOpenDly)
    {
        return getShtrOpenDly(shtrOpenDly, null);
    }

    public final boolean
    getShtrStatus(Ice.ShortHolder shtrStatus)
    {
        return getShtrStatus(shtrStatus, null);
    }

    public final boolean
    getSpeed(Ice.IntHolder speed)
    {
        return getSpeed(speed, null);
    }

    public final boolean
    getSpeedEntries(Ice.IntHolder entries)
    {
        return getSpeedEntries(entries, null);
    }

    public final boolean
    getSpeedMode(Ice.ShortHolder speed)
    {
        return getSpeedMode(speed, null);
    }

    public final boolean
    getTimeout(Ice.IntHolder mSec)
    {
        return getTimeout(mSec, null);
    }

    public final boolean
    getTmp(Ice.FloatHolder curTmp)
    {
        return getTmp(curTmp, null);
    }

    public final boolean
    getTmpSetpoint(Ice.FloatHolder tmpSetpoint)
    {
        return getTmpSetpoint(tmpSetpoint, null);
    }

    public final boolean
    initCamera(int index)
        throws CamException
    {
        return initCamera(index, null);
    }

    public final boolean
    setClearCycles(int clearCycles)
    {
        return setClearCycles(clearCycles, null);
    }

    public final boolean
    setClearStrips(int strips)
    {
        return setClearStrips(strips, null);
    }

    public final boolean
    setGain(int gain)
    {
        return setGain(gain, null);
    }

    public final boolean
    setGainMultEnable(int enabled)
    {
        return setGainMultEnable(enabled, null);
    }

    public final boolean
    setGainMultFactor(int factor)
    {
        return setGainMultFactor(factor, null);
    }

    public final boolean
    setReadoutport(short port)
    {
        return setReadoutport(port, null);
    }

    public final boolean
    setRetries(int retries)
    {
        return setRetries(retries, null);
    }

    public final boolean
    setShtrCloseDly(int shtrCloseDly)
    {
        return setShtrCloseDly(shtrCloseDly, null);
    }

    public final boolean
    setShtrOpenDly(int shtrOpenDly)
    {
        return setShtrOpenDly(shtrOpenDly, null);
    }

    public final boolean
    setSpeedMode(short speed)
    {
        return setSpeedMode(speed, null);
    }

    public final boolean
    setTimeout(int mSec)
    {
        return setTimeout(mSec, null);
    }

    public final boolean
    setTmpSetpoint(float tmpSetpoint)
    {
        return setTmpSetpoint(tmpSetpoint, null);
    }

    public final boolean
    shtrOpenNever()
    {
        return shtrOpenNever(null);
    }

    public final boolean
    shtrOpenNormal()
    {
        return shtrOpenNormal(null);
    }

    public final boolean
    uninitCamera()
    {
        return uninitCamera(null);
    }

    public static Ice.DispatchStatus
    ___initCamera(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int index;
        index = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            boolean __ret = __obj.initCamera(index, __current);
            __os.writeBool(__ret);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(CamException ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___uninitCamera(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.uninitCamera(__current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getSensorSize(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.ShortHolder xSize = new Ice.ShortHolder();
        Ice.ShortHolder ySize = new Ice.ShortHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getSensorSize(xSize, ySize, __current);
        __os.writeShort(xSize.value);
        __os.writeShort(ySize.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___expSetup(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        long exposureTime;
        exposureTime = __is.readLong();
        short x0;
        x0 = __is.readShort();
        short x1;
        x1 = __is.readShort();
        short y0;
        y0 = __is.readShort();
        short y1;
        y1 = __is.readShort();
        short xbin;
        xbin = __is.readShort();
        short ybin;
        ybin = __is.readShort();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.expSetup(exposureTime, x0, x1, y0, y1, xbin, ybin, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___expStart(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.expStart(__current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___expCheckStatus(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.expCheckStatus(__current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___expGetFrame(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        ImageContainerHolder image = new ImageContainerHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.expGetFrame(image, __current);
        ImageContainerHelper.write(__os, image.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___expHalt(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        short camState;
        camState = __is.readShort();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.expHalt(camState, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___contStart(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        long exposureTime;
        exposureTime = __is.readLong();
        short x0;
        x0 = __is.readShort();
        short x1;
        x1 = __is.readShort();
        short y0;
        y0 = __is.readShort();
        short y1;
        y1 = __is.readShort();
        short xbin;
        xbin = __is.readShort();
        short ybin;
        ybin = __is.readShort();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.contStart(exposureTime, x0, x1, y0, y1, xbin, ybin, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___contCheckStatus(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            boolean __ret = __obj.contCheckStatus(__current);
            __os.writeBool(__ret);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(CamException ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___contHalt(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        short camState;
        camState = __is.readShort();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.contHalt(camState, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___contGetFrame(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        ImageContainerHolder image = new ImageContainerHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.contGetFrame(image, __current);
        ImageContainerHelper.write(__os, image.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getError(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.StringHolder error = new Ice.StringHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getError(error, __current);
        __os.writeString(error.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getParamList(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        ParamContainerHolder params = new ParamContainerHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getParamList(params, __current);
        ParamContainerHelper.write(__os, params.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getCcsStatus(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder ccsStatus = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getCcsStatus(ccsStatus, __current);
        __os.writeInt(ccsStatus.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getShtrStatus(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.ShortHolder shtrStatus = new Ice.ShortHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getShtrStatus(shtrStatus, __current);
        __os.writeShort(shtrStatus.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___shtrOpenNever(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.shtrOpenNever(__current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___shtrOpenNormal(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.shtrOpenNormal(__current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getShtrOpenDly(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder shtrOpenDly = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getShtrOpenDly(shtrOpenDly, __current);
        __os.writeInt(shtrOpenDly.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setShtrOpenDly(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int shtrOpenDly;
        shtrOpenDly = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.setShtrOpenDly(shtrOpenDly, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getShtrCloseDly(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder shtrCloseDly = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getShtrCloseDly(shtrCloseDly, __current);
        __os.writeInt(shtrCloseDly.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setShtrCloseDly(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int shtrCloseDly;
        shtrCloseDly = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.setShtrCloseDly(shtrCloseDly, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getClearCycles(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder cycles = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getClearCycles(cycles, __current);
        __os.writeInt(cycles.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setClearCycles(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int clearCycles;
        clearCycles = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.setClearCycles(clearCycles, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getClearStrips(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder strips = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getClearStrips(strips, __current);
        __os.writeInt(strips.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setClearStrips(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int strips;
        strips = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.setClearStrips(strips, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getTmp(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.FloatHolder curTmp = new Ice.FloatHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getTmp(curTmp, __current);
        __os.writeFloat(curTmp.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getTmpSetpoint(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.FloatHolder tmpSetpoint = new Ice.FloatHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getTmpSetpoint(tmpSetpoint, __current);
        __os.writeFloat(tmpSetpoint.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setTmpSetpoint(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        float tmpSetpoint;
        tmpSetpoint = __is.readFloat();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.setTmpSetpoint(tmpSetpoint, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getMaxGain(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder maxGain = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getMaxGain(maxGain, __current);
        __os.writeInt(maxGain.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getGain(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder gain = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getGain(gain, __current);
        __os.writeInt(gain.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setGain(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int gain;
        gain = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.setGain(gain, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getGainMultEnable(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder enabled = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getGainMultEnable(enabled, __current);
        __os.writeInt(enabled.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setGainMultEnable(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int enabled;
        enabled = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.setGainMultEnable(enabled, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getGainMultFactor(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder factor = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getGainMultFactor(factor, __current);
        __os.writeInt(factor.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setGainMultFactor(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int factor;
        factor = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.setGainMultFactor(factor, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getSpeed(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder speed = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getSpeed(speed, __current);
        __os.writeInt(speed.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getSpeedEntries(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder entries = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getSpeedEntries(entries, __current);
        __os.writeInt(entries.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getReadoutPortEntries(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder entries = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getReadoutPortEntries(entries, __current);
        __os.writeInt(entries.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getBits(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder bits = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getBits(bits, __current);
        __os.writeInt(bits.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getSpeedMode(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.ShortHolder speed = new Ice.ShortHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getSpeedMode(speed, __current);
        __os.writeShort(speed.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setSpeedMode(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        short speed;
        speed = __is.readShort();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.setSpeedMode(speed, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getReadoutPort(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.ShortHolder port = new Ice.ShortHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getReadoutPort(port, __current);
        __os.writeShort(port.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setReadoutport(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        short port;
        port = __is.readShort();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.setReadoutport(port, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getRetries(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder retries = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getRetries(retries, __current);
        __os.writeInt(retries.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setRetries(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int retries;
        retries = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.setRetries(retries, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getTimeout(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder mSec = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getTimeout(mSec, __current);
        __os.writeInt(mSec.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setTimeout(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int mSec;
        mSec = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.setTimeout(mSec, __current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getFrameCapable(PixisICE __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder frameCapable = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.getFrameCapable(frameCapable, __current);
        __os.writeInt(frameCapable.value);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "contCheckStatus",
        "contGetFrame",
        "contHalt",
        "contStart",
        "expCheckStatus",
        "expGetFrame",
        "expHalt",
        "expSetup",
        "expStart",
        "getBits",
        "getCcsStatus",
        "getClearCycles",
        "getClearStrips",
        "getError",
        "getFrameCapable",
        "getGain",
        "getGainMultEnable",
        "getGainMultFactor",
        "getMaxGain",
        "getParamList",
        "getReadoutPort",
        "getReadoutPortEntries",
        "getRetries",
        "getSensorSize",
        "getShtrCloseDly",
        "getShtrOpenDly",
        "getShtrStatus",
        "getSpeed",
        "getSpeedEntries",
        "getSpeedMode",
        "getTimeout",
        "getTmp",
        "getTmpSetpoint",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "initCamera",
        "setClearCycles",
        "setClearStrips",
        "setGain",
        "setGainMultEnable",
        "setGainMultFactor",
        "setReadoutport",
        "setRetries",
        "setShtrCloseDly",
        "setShtrOpenDly",
        "setSpeedMode",
        "setTimeout",
        "setTmpSetpoint",
        "shtrOpenNever",
        "shtrOpenNormal",
        "uninitCamera"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___contCheckStatus(this, in, __current);
            }
            case 1:
            {
                return ___contGetFrame(this, in, __current);
            }
            case 2:
            {
                return ___contHalt(this, in, __current);
            }
            case 3:
            {
                return ___contStart(this, in, __current);
            }
            case 4:
            {
                return ___expCheckStatus(this, in, __current);
            }
            case 5:
            {
                return ___expGetFrame(this, in, __current);
            }
            case 6:
            {
                return ___expHalt(this, in, __current);
            }
            case 7:
            {
                return ___expSetup(this, in, __current);
            }
            case 8:
            {
                return ___expStart(this, in, __current);
            }
            case 9:
            {
                return ___getBits(this, in, __current);
            }
            case 10:
            {
                return ___getCcsStatus(this, in, __current);
            }
            case 11:
            {
                return ___getClearCycles(this, in, __current);
            }
            case 12:
            {
                return ___getClearStrips(this, in, __current);
            }
            case 13:
            {
                return ___getError(this, in, __current);
            }
            case 14:
            {
                return ___getFrameCapable(this, in, __current);
            }
            case 15:
            {
                return ___getGain(this, in, __current);
            }
            case 16:
            {
                return ___getGainMultEnable(this, in, __current);
            }
            case 17:
            {
                return ___getGainMultFactor(this, in, __current);
            }
            case 18:
            {
                return ___getMaxGain(this, in, __current);
            }
            case 19:
            {
                return ___getParamList(this, in, __current);
            }
            case 20:
            {
                return ___getReadoutPort(this, in, __current);
            }
            case 21:
            {
                return ___getReadoutPortEntries(this, in, __current);
            }
            case 22:
            {
                return ___getRetries(this, in, __current);
            }
            case 23:
            {
                return ___getSensorSize(this, in, __current);
            }
            case 24:
            {
                return ___getShtrCloseDly(this, in, __current);
            }
            case 25:
            {
                return ___getShtrOpenDly(this, in, __current);
            }
            case 26:
            {
                return ___getShtrStatus(this, in, __current);
            }
            case 27:
            {
                return ___getSpeed(this, in, __current);
            }
            case 28:
            {
                return ___getSpeedEntries(this, in, __current);
            }
            case 29:
            {
                return ___getSpeedMode(this, in, __current);
            }
            case 30:
            {
                return ___getTimeout(this, in, __current);
            }
            case 31:
            {
                return ___getTmp(this, in, __current);
            }
            case 32:
            {
                return ___getTmpSetpoint(this, in, __current);
            }
            case 33:
            {
                return ___ice_id(this, in, __current);
            }
            case 34:
            {
                return ___ice_ids(this, in, __current);
            }
            case 35:
            {
                return ___ice_isA(this, in, __current);
            }
            case 36:
            {
                return ___ice_ping(this, in, __current);
            }
            case 37:
            {
                return ___initCamera(this, in, __current);
            }
            case 38:
            {
                return ___setClearCycles(this, in, __current);
            }
            case 39:
            {
                return ___setClearStrips(this, in, __current);
            }
            case 40:
            {
                return ___setGain(this, in, __current);
            }
            case 41:
            {
                return ___setGainMultEnable(this, in, __current);
            }
            case 42:
            {
                return ___setGainMultFactor(this, in, __current);
            }
            case 43:
            {
                return ___setReadoutport(this, in, __current);
            }
            case 44:
            {
                return ___setRetries(this, in, __current);
            }
            case 45:
            {
                return ___setShtrCloseDly(this, in, __current);
            }
            case 46:
            {
                return ___setShtrOpenDly(this, in, __current);
            }
            case 47:
            {
                return ___setSpeedMode(this, in, __current);
            }
            case 48:
            {
                return ___setTimeout(this, in, __current);
            }
            case 49:
            {
                return ___setTmpSetpoint(this, in, __current);
            }
            case 50:
            {
                return ___shtrOpenNever(this, in, __current);
            }
            case 51:
            {
                return ___shtrOpenNormal(this, in, __current);
            }
            case 52:
            {
                return ___uninitCamera(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type cxro::common::device::Pixis::PixisICE was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type cxro::common::device::Pixis::PixisICE was not generated with stream support";
        throw ex;
    }
}

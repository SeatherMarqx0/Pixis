// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_PixisICEOperations.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package cxro.common.device.Pixis;

public interface _PixisICEOperations
{
    boolean initCamera(int index, Ice.Current __current)
        throws CamException;

    boolean uninitCamera(Ice.Current __current);

    boolean getSensorSize(Ice.ShortHolder xSize, Ice.ShortHolder ySize, Ice.Current __current);

    boolean expSetup(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, Ice.Current __current);

    boolean expStart(Ice.Current __current);

    boolean expCheckStatus(Ice.Current __current);

    boolean expGetFrame(ImageContainerHolder image, Ice.Current __current);

    boolean expHalt(short camState, Ice.Current __current);

    boolean contStart(long exposureTime, short x0, short x1, short y0, short y1, short xbin, short ybin, Ice.Current __current);

    boolean contCheckStatus(Ice.Current __current)
        throws CamException;

    boolean contHalt(short camState, Ice.Current __current);

    boolean contGetFrame(ImageContainerHolder image, Ice.Current __current);

    boolean getError(Ice.StringHolder error, Ice.Current __current);

    boolean getParamList(ParamContainerHolder params, Ice.Current __current);

    boolean getCcsStatus(Ice.IntHolder ccsStatus, Ice.Current __current);

    boolean getShtrStatus(Ice.ShortHolder shtrStatus, Ice.Current __current);

    boolean shtrOpenNever(Ice.Current __current);

    boolean shtrOpenNormal(Ice.Current __current);

    boolean getShtrOpenDly(Ice.IntHolder shtrOpenDly, Ice.Current __current);

    boolean setShtrOpenDly(int shtrOpenDly, Ice.Current __current);

    boolean getShtrCloseDly(Ice.IntHolder shtrCloseDly, Ice.Current __current);

    boolean setShtrCloseDly(int shtrCloseDly, Ice.Current __current);

    boolean getClearCycles(Ice.IntHolder cycles, Ice.Current __current);

    boolean setClearCycles(int clearCycles, Ice.Current __current);

    boolean getClearStrips(Ice.IntHolder strips, Ice.Current __current);

    boolean setClearStrips(int strips, Ice.Current __current);

    boolean getTmp(Ice.FloatHolder curTmp, Ice.Current __current);

    boolean getTmpSetpoint(Ice.FloatHolder tmpSetpoint, Ice.Current __current);

    boolean setTmpSetpoint(float tmpSetpoint, Ice.Current __current);

    boolean getMaxGain(Ice.IntHolder maxGain, Ice.Current __current);

    boolean getGain(Ice.IntHolder gain, Ice.Current __current);

    boolean setGain(int gain, Ice.Current __current);

    boolean getGainMultEnable(Ice.IntHolder enabled, Ice.Current __current);

    boolean setGainMultEnable(int enabled, Ice.Current __current);

    boolean getGainMultFactor(Ice.IntHolder factor, Ice.Current __current);

    boolean setGainMultFactor(int factor, Ice.Current __current);

    boolean getSpeed(Ice.IntHolder speed, Ice.Current __current);

    boolean getSpeedEntries(Ice.IntHolder entries, Ice.Current __current);

    boolean getReadoutPortEntries(Ice.IntHolder entries, Ice.Current __current);

    boolean getBits(Ice.IntHolder bits, Ice.Current __current);

    boolean getSpeedMode(Ice.ShortHolder speed, Ice.Current __current);

    boolean setSpeedMode(short speed, Ice.Current __current);

    boolean getReadoutPort(Ice.ShortHolder port, Ice.Current __current);

    boolean setReadoutport(short port, Ice.Current __current);

    boolean getRetries(Ice.IntHolder retries, Ice.Current __current);

    boolean setRetries(int retries, Ice.Current __current);

    boolean getTimeout(Ice.IntHolder mSec, Ice.Current __current);

    boolean setTimeout(int mSec, Ice.Current __current);

    boolean getFrameCapable(Ice.IntHolder frameCapable, Ice.Current __current);
}
